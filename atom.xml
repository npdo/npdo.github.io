<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>npdo</title>
  
  <subtitle>Be patient and be cool</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-08-25T14:03:20.100Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>npdo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>二叉搜索树转双向链表</title>
    <link href="http://yoursite.com/2018/08/25/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E8%BD%AC%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>http://yoursite.com/2018/08/25/二叉搜索树转双向链表/</id>
    <published>2018-08-25T14:01:10.000Z</published>
    <updated>2018-08-25T14:03:20.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="二叉搜索树转双向链表"><a href="#二叉搜索树转双向链表" class="headerlink" title="二叉搜索树转双向链表"></a>二叉搜索树转双向链表</h1><p>题目：输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>递归实现，中序遍历<br>{题外话：递归核心思想：通过每次递归维护状态（更新或保存状态）}</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">public class TreeNode &#123;</span></span><br><span class="line"><span class="comment">    int val = 0;</span></span><br><span class="line"><span class="comment">    TreeNode left = null;</span></span><br><span class="line"><span class="comment">    TreeNode right = null;</span></span><br><span class="line"><span class="comment">    public TreeNode(int val) &#123;</span></span><br><span class="line"><span class="comment">        this.val = val;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//递归版本</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Solution</span> </span>&#123;</span><br><span class="line">    <span class="comment">//维护链表两个状态量</span></span><br><span class="line">    TreeNode head = <span class="keyword">null</span>;<span class="comment">//链表的头节点</span></span><br><span class="line">    TreeNode tail = <span class="keyword">null</span>;<span class="comment">//链表的尾节点</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">Convert</span><span class="params">(TreeNode pRootOfTree)</span> </span>&#123;</span><br><span class="line">        ConvertSub(pRootOfTree);</span><br><span class="line">        <span class="keyword">return</span> head;</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">ConvertSub</span><span class="params">(TreeNode pRootOfTree)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//如果null,则不操作，即不更新head和tail</span></span><br><span class="line">        <span class="keyword">if</span>(pRootOfTree==<span class="keyword">null</span>) <span class="keyword">return</span>;</span><br><span class="line">        ConvertSub(pRootOfTree.left);</span><br><span class="line">        <span class="comment">//二叉树最左边的节点时，第一次更新head和tail，从此head不变</span></span><br><span class="line">        <span class="keyword">if</span> (head == <span class="keyword">null</span>) &#123;</span><br><span class="line">            head = pRootOfTree;</span><br><span class="line">            tail = pRootOfTree;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//传入的根节点pRootNode加入到前面生成的链表尾部</span></span><br><span class="line">            tail.right = pRootOfTree;</span><br><span class="line">            pRootOfTree.left = tail;</span><br><span class="line">            tail = pRootOfTree;<span class="comment">//更新链表tail为新加入链表的pRootNode</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//添加右节点到链表并更新tail</span></span><br><span class="line">        ConvertSub(pRootOfTree.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;二叉搜索树转双向链表&quot;&gt;&lt;a href=&quot;#二叉搜索树转双向链表&quot; class=&quot;headerlink&quot; title=&quot;二叉搜索树转双向链表&quot;&gt;&lt;/a&gt;二叉搜索树转双向链表&lt;/h1&gt;&lt;p&gt;题目：输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创
      
    
    </summary>
    
    
      <category term="剑指offer" scheme="http://yoursite.com/tags/%E5%89%91%E6%8C%87offer/"/>
    
      <category term="二叉搜索树" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
      <category term="双向链表" scheme="http://yoursite.com/tags/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
</feed>
